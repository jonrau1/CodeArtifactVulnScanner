# This file is part of OpenCAVS.

# OpenCAVS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# OpenCAVS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along with OpenCAVS.  
# If not, see https://github.com/jonrau1/CodeArtifactVulnScanner/blob/main/LICENSE.
AWSTemplateFormatVersion: 2010-09-09
Description: Creates the baseline resources needed for OpenCAVS such as WAF, Kinesis, ES and MISP assets. Deploy this first.
Parameters:
  NVDDynamoDBTableName:
    Type: String
    Description: >-
      The name of the DyanmoDB Table that contains all of the software package vulnerability information. PLEASE ENSURE
      that it is located in the same Region, Account and Partition you are deploying this solution to!
  PurgingEngineFlag:
    Type: String
    Default: NO_PURGE
    Description: >-
      This flag is passed as an environment variable to your Lambda Function and if set to PURGE an optional function
      within the underlying code will remove vulnerable software packages above a specified CVSSv2.0 Base Score threshold.
    AllowedValues: 
      - NO_PURGE
      - PURGE
  Cvss2BaseScoreThreshold:
    Type: Number
    MinValue: 0
    MaxValue: 10.0
    Default: 10.0
    ConstraintDescription: >-
      The value must be an Integer or Float between 0 and 10.0!
    Description: >-
      If PURGE is set for your OpenCAVS Lambda Function, this value is passed as an environment variable and represents
      the threshold at which the function will remove vulnerable software packages. E.g., if you set this value to 6.9 then
      any vulnerability with a CVSSv2.0 Base Score of 6.9 or Above (Greater Than Equal To) will cause the associated software
      package to be removed from CodeArtifact
  SolutionVariable:
    Type: String
    Default: OpenCAVSCentralized
    Description: >-
      This value will be interpolated into all associated resources created by the solution for easy identification.
      If you change this value please ensure you do not use Numbers or Special Characters as the downstream service
      may not support that as a valid naming convention value.
  NistModifedJsonFeedUrl:
    Type: String
    Default: https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-modified.json.gz
    Description: >-
      The URL for the the location of the Modified NIST JSON Feed
Resources:
  OpenCAVSAnalysisLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${SolutionVariable}Function'
      Description: >-
        Receives software package information from EventBridge and checks if it is vulnerable. Will optionally purge
        vulnerable packages above a certain threshold - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt OpenCAVSLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          PURGE_ENABLED: !Ref PurgingEngineFlag
          CVSS2_BASE_SCORE_THRESHOLD: !Ref Cvss2BaseScoreThreshold
          NVD_DDB_TABLE: !Ref NVDDynamoDBTableName
      Code:
        ZipFile: |
          import os
          import boto3
          def lambda_handler(event, context):
              print('TO DO!!!')
  OpenCAVSVulnUpdaterLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${SolutionVariable}VulnUpdaterFunction'
      Description: >-
        Every 24 hours this function will parse the Modified NVD JSON Feed and write the 
        contents into a DyanmoDB Table of your choosing - Managed by CloudFormation
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt OpenCAVSLambdaExecRole.Arn
      Runtime: python3.7
      Timeout: 480
      Environment:
        Variables:
          NVD_DDB_TABLE: !Ref NVDDynamoDBTableName
          NVD_MODIFIED_URL: !Ref NistModifedJsonFeedUrl
      Code:
        ZipFile: |
          import os
          import boto3
          def lambda_handler(event, context):
              print('TO DO!!!')
  OpenCAVSLambdaExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${SolutionVariable}FunctionRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: !Sub '${SolutionVariable}FunctionRolePolicy'
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - dynamodb:Scan
              - dynamodb:PutItem
            Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NVDDynamoDBTableName}'
          - Effect: Allow
            Action:
              - securityhub:BatchImportFindings
            Resource: '*'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: { Service: lambda.amazonaws.com }
          Action:
          - sts:AssumeRole
  OpenCAVSAnalysisEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub '${SolutionVariable}CodeArtifactAnalysisEvent'
      Description: >-
        Triggers a Lambda Function upon any new software packages being added, or existing packages updated, within
        AWS CodeArtifact - Managed by CloudFormation
      EventPattern: 
        source:
          - aws.codeartifact
        detail-type:
          - Security Hub Findings - Imported
        ## TODO: Fix this whole section!
        detail:
          findings:
            ProductFields:
              Product Name:
                - ElectricEye
            Severity:
              Label:
                - HIGH
                - CRITICAL
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt OpenCAVSAnalysisLambdaFunction.Arn
          Id: OpenCAVSAnalysisRule
  OpenCAVSAnalyzerCWEPermissions: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref OpenCAVSAnalysisLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt OpenCAVSAnalysisEventRule.Arn
  OpenCAVSVulnUpdaterScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub '${SolutionVariable}VulnUpdaterEvent'
      Description: >-
        Triggers a Lambda Function that will parse the Modified NVD JSON Feed and write the 
        contents into a DyanmoDB Table of your choosing - Managed by CloudFormation
      ScheduleExpression: rate(24 hours)
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt OpenCAVSVulnUpdaterLambdaFunction.Arn
          Id: OpenCAVSUpdaterRule
  OpenCAVSVulnUpdaterCWEPermissions: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref OpenCAVSVulnUpdaterLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt OpenCAVSVulnUpdaterScheduledRule.Arn